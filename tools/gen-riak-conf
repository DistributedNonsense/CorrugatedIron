#!/usr/bin/env bash

declare -r out_file="$1"
declare -ir http_port="$2"
declare -ir pb_port="$3"
declare -ir https_port="${4:-0}"
declare -r security_cacert_file="$5"
declare -r security_cert_file="$6"
declare -r security_key_file="$7"

cat >> $out_file <<EOT
ring_size = 16
search = on
storage_backend = multi
multi_backend.default = bitcask_backend

multi_backend.bitcask_backend.storage_backend = bitcask
multi_backend.bitcask_backend.bitcask.data_root = \$(platform_data_dir)/bitcask
multi_backend.bitcask_backend.bitcask.io_mode = erlang

multi_backend.leveldb_backend.storage_backend = leveldb
multi_backend.leveldb_backend.leveldb.data_root = \$(platform_data_dir)/leveldb
multi_backend.leveldb_backend.leveldb.maximum_memory.percent = 30

multi_backend.mem_backend.storage_backend = memory
multi_backend.mem_backend.memory_backend.ttl = 10s
multi_backend.mem_backend.memory_backend.max_memory_per_vnode = 4MB

tls_protocols.sslv3 = off
tls_protocols.tlsv1 = on
tls_protocols.tlsv1.1 = on
tls_protocols.tlsv1.2 = on
check_crl = off

listener.http.internal = 0.0.0.0:$http_port
listener.protobuf.internal = 0.0.0.0:$pb_port
EOT

if (( https_port > 0 ))
then
    cat >> $out_file <<EOT
listener.https.internal = 0.0.0.0:$https_port
ssl.cacertfile = $security_cacert_file
ssl.certfile = $security_cert_file
ssl.keyfile = $security_key_file
EOT
fi

