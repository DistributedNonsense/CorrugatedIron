#!/usr/bin/env bash

set -o errexit
set -o nounset

# Defaults
declare -i i=0
declare -r riak_admin=dev1/bin/riak-admin
declare -r default_dev_cluster_path="$HOME/Projects/basho/riak/dev"
declare -ir default_node_count=4
declare -ir strong_consistency_node_count=4

# Option vars
opt_strong_consistency='false'
opt_legacy_search='false'
opt_use_security='false'
opt_default_backend='bitcask'
declare -i opt_node_count=$default_node_count

script_dir=''
script_path=''
if hash realpath 2>/dev/null
then
    script_dir="$(dirname $0)"
    script_path="$(realpath $script_dir)"
else
    script_path="$(perl -e 'use File::Basename;use Cwd q(abs_path);print dirname(abs_path(shift))' $0)"
fi
PATH="$PATH:$script_path"

function make_temp_file
{
    local template="$1"
    if [[ $template != *XXXXXX ]]
    then
        template="$template.XXXXXX"
    fi
    mktemp -t "$template"
}

function transfers_in_progress
{
    local -i retval=0
    local transfers_out=$(make_temp_file riak-admin-transfers)

    set +o errexit
    $riak_admin transfers > $transfers_out 2>&1
    if grep -iqF 'No transfers active' $transfers_out
    then
        retval=1 # No longer in progress, return false
    else
        retval=0
    fi
    # rm -vf $transfers_out
    set -o errexit
    return $retval
}

function now
{
    date '+%Y-%m-%d %H:%M:%S'
}

function pwarn
{
    echo "$(now) [warning]: $@" 1>&2
}

function perr
{
    echo "$(now) [error]: $@" 1>&2
}

function pinfo
{
    echo "$(now) [info]: $@"
}

function errexit
{
    perr "$@"
    exit 1
}

function onexit
{
    echo Exiting!
    (( ${#DIRSTACK[*]} > 1 )) && popd
}

function wait_for_transfers
{
    sleep 5
    while transfers_in_progress
    do
        pinfo 'Transfers in progress'
        sleep 5
    done
}

function usage
{
      echo "
setup-dev-cluster: Quickly setup a dev Riak cluster.

Usage: setup-dev-cluster [-p <riak dev path>] [-n <node count>] [-l] [-c]

-p      Riak dev path (Default: \"$default_dev_cluster_path\")
-n      Node count (Default: $default_node_count)
-l      Set up cluster to use Legacy Search instead of Yokozuna Search
-c      Set up cluster for Strong Consistency
        Note: overrides -n setting and requires at least $strong_consistency_node_count nodes
-s      Set up cluster to use Riak Security
-b      Default backend to use (Default: \"bitcask\", can be \"leveldb\")
"
      exit 0
}

while getopts "hslb:p:n:c" opt; do
    case $opt in
        l)
            opt_legacy_search='true';;
        p)
            opt_dev_cluster_path="$OPTARG";;
        n)
            opt_node_count="$OPTARG";;
        c)
            opt_strong_consistency='true';;
        s)
            opt_use_security='true';;
        b)
            opt_default_backend="$OPTARG";;
        *)
            usage;;
    esac
done

default_backend='bitcask'
case $opt_default_backend in
    bitcask)
        default_backend='bitcask';;
    leveldb)
        default_backend='leveldb';;
    *)
        pinfo '-b argument must either be bitcask or leveldb.'
        usage;;
esac

if [[ $opt_use_security == 'true' ]]
then
    pinfo 'NOTE: using Riak Security. This will require HTTPS and TLS connections.'
    security_cacert_file="$script_path/test-ca/certs/cacert.pem"
    security_cert_file="$script_path/test-ca/certs/riak-test-cert.pem"
    security_key_file="$script_path/test-ca/private/riak-test-key.pem"
    for file in $security_cacert_file $security_cert_file $security_key_file
    do
        if [[ ! -f $file  ]]
        then
            errexit "missing security file: $file"
        fi
    done
fi

trap onexit EXIT

declare -r dev_cluster_path="${opt_dev_cluster_path:-$default_dev_cluster_path}"

if [[ $opt_strong_consistency == 'true' ]]
then
    declare -ir node_count=$strong_consistency_node_count
    if (( opt_node_count > node_count ))
    then
        node_count=opt_node_count
    fi
else
    declare -ir node_count="${opt_node_count:-$default_node_count}"
fi

if [[ -d $dev_cluster_path ]]
then
    pinfo "Setting up dev cluster in $dev_cluster_path with $node_count nodes"
else
    errexit "Dev cluster path $dev_cluster_path does not exist!"
fi

if [[ $opt_strong_consistency == 'true' ]]
then
    pinfo 'Setting up dev cluster with Strong Consistency'
fi

if [[ $opt_legacy_search == 'true' ]]
then
    pinfo "Setting up dev cluster with Legacy Search"
fi

pushd $dev_cluster_path > /dev/null

for ((i = 1; i <= node_count; ++i))
do
    dev_node_path="dev$i"
    if [[ ! -d $dev_node_path ]]
    then
        errexit "Dev node directory $dev_node_path does not exist!"
    fi
done

pinfo "Stopping Riak"

set +o errexit
for devdir in dev*
do
    $devdir/bin/riak stop > /dev/null
done

pinfo "Removing old Riak data"

for datadir in dev*/data/*
do
    find $datadir -type f -delete
done
set -o errexit

declare -i pb_port=10017
declare -i http_port=10018
declare -i https_port=10418

pinfo "Configuring riak.conf"

for ((i = 1; i <= node_count; ++i))
do
    devdir="dev$i"

    adv_conf="$devdir/etc/advanced.config"
    riak_conf="$devdir/etc/riak.conf"
    riak_conf_orig="$devdir/etc/riak.conf.orig"
    if [[ -f $riak_conf_orig ]]
    then
        cp -f $riak_conf_orig $riak_conf
    else
        cp -f $riak_conf $riak_conf_orig
    fi

    if [[ $opt_use_security == 'true' ]]
    then
        gen-riak-conf "$riak_conf" $http_port $pb_port $https_port "$security_cacert_file" "$security_cert_file" "$security_key_file" "$default_backend"
    else
        gen-riak-conf "$riak_conf" $http_port $pb_port
    fi

    gen-adv-conf $adv_conf

    if [[ $opt_legacy_search == 'true' ]]
    then
        legacy-search-conf $riak_conf $adv_conf
    fi

    if [[ $opt_strong_consistency == 'true' ]]
    then
        strong-consistency-conf $riak_conf
    fi

    (( pb_port += 10 ))
    (( http_port += 10 ))
    (( https_port += 10 ))
done

pinfo "Starting Riak"

for ((i = 1; i <= node_count; ++i))
do
    devdir="dev$i"
    $devdir/bin/riak start
done

for ((i = 2; i <= node_count; ++i))
do
    devdir="dev$i"
    $devdir/bin/riak-admin cluster join dev1@127.0.0.1
done

$riak_admin cluster plan
$riak_admin cluster commit
$riak_admin transfer-limit 16

wait_for_transfers

pinfo "Riak started, setting up bucket types"
riak-cluster-config "$riak_admin" 10018 "$opt_strong_consistency" "$opt_use_security"
pinfo "Done!"

