<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Debug" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\..\</SolutionDir>
    <BuildPath>$(SolutionDir)build</BuildPath>
  </PropertyGroup>

  <Import Project="$(BuildPath)\properties.xml" Condition="'$(PropertiesImported)' != 'true'" />
  <Import Project="$(BuildPath)\assemblyinfo.targets" />

  <Target Name="CleanCommonAssemblyInfo">
    <Delete Files="$(CommonAssemblyInfoFile)" />
  </Target>

  <Target Name="PublishValidateOnDevelopBranch">
    <!-- Validate that we are on develop branch -->
    <GitBranch LocalPath="$(SolutionDir)">
      <Output TaskParameter="Branch" PropertyName="GitBranch" />
    </GitBranch>
    <Error Condition="'$(GitBranch)' != '$(DevelopBranchName)'"
           Text="Please ensure all features have been merged into $(DevelopBranchName) and that you are on the $(DevelopBranchName) branch." />
  </Target>

  <Target Name="PublishValidateVersionString">
    <Error Condition="'$(VersionString)' == '' Or '$(VersionString)' == 'unknown'"
           Text="Must set VersionString property on command line!" />
  </Target>

  <Target Name="PublishValidation" DependsOnTargets="PublishValidateVersionString;PublishValidateOnDevelopBranch;PopulateVersionInformation">
    <!-- Validate parsed VersionString -->
    <RegexMatch Input="$(VMajor)" Expression="^[1-9]$">
      <Output PropertyName="VMajorValidated" TaskParameter="Output" />
    </RegexMatch>
    <Error Condition="'$(VMajorValidated)' == '' Or (!($(VMajorValidated) &gt; 0))"
           Text="VersionString must be in vX.Y.Z-PreRelStr where X &gt; 0 and -PreRelStr is optional" />
    <RegexMatch Input="$(VMinor)" Expression="^[0-9]$">
      <Output PropertyName="VMinorValidated" TaskParameter="Output" />
    </RegexMatch>
    <Error Condition="'$(VMinorValidated)' == '' Or (!($(VMajorValidated) &gt;= 0))"
           Text="VersionString must be in vX.Y.Z-PreRelStr where X &gt; 0 and -PreRelStr is optional" />
    <RegexMatch Input="$(VPatch)" Expression="^[0-9]$">
      <Output PropertyName="VPatchValidated" TaskParameter="Output" />
    </RegexMatch>
    <Error Condition="'$(VPatchValidated)' == '' Or (!($(VMajorValidated) &gt;= 0))"
           Text="VersionString must be in vX.Y.Z-PreRelStr where X &gt; 0 and -PreRelStr is optional" />

    <PropertyGroup Condition="'$(VPreRelease)' == ''">
      <NuGetVersion>$(VMajor).$(VMinor).$(VPatch)</NuGetVersion>
    </PropertyGroup>
    <PropertyGroup Condition="'$(VPreRelease)' != ''">
      <NuGetVersion>$(VMajor).$(VMinor).$(VPatch)-$(VPreRelease)</NuGetVersion>
    </PropertyGroup>
    <PropertyGroup>
      <GitTagVersion>v$(NuGetVersion)</GitTagVersion>
    </PropertyGroup>
  </Target>

  <Target Name="PublishMergeMasterAndTag" DependsOnTargets="PublishValidateOnDevelopBranch">
    <Message Text="Checking out '$(MasterBranchName)' branch" />
    <GitClient Command="checkout" Arguments="$(MasterBranchName)" LocalPath="$(SolutionDir)" />
    <Message Text="Cleaning '$(MasterBranchName)' branch" />
    <GitClient Command="clean" Arguments="-fxd" LocalPath="$(SolutionDir)" />
    <Message Text="Merging '$(DevelopBranchName)' into '$(MasterBranchName)' NOTE: this will fail if the merge can't be done via fast-forward!" />
    <GitClient Command="merge" Arguments="--no-ff --commit --ff-only $(DevelopBranchName)" LocalPath="$(SolutionDir)" />
    <GitClient Command="tag" Arguments="--message &quot;riak-dotnet-client $(NuGetVersion)&quot; &quot;$(GitTagVersion)&quot;" LocalPath="$(SolutionDir)" />
    <GitClient Command="push" Arguments="$(GitRemoteName) &quot;$(GitTagVersion)&quot;" LocalPath="$(SolutionDir)" />
  </Target>

  <Target Name="GenerateCommonAssemblyInfo" DependsOnTargets="PopulateVersionInformation">

    <Message Text="VersionString: $(VersionString) Version: $(VMajor).$(VMinor).$(VPatch) PreRelease: $(VPreRelease) Commit hash: $(GitCommitHash)"/>

    <Time>
      <Output TaskParameter="Year" PropertyName="Year" />
    </Time>

    <Attrib Files="$(CommonAssemblyInfoFile)" ReadOnly="False" />

    <!-- http://stackoverflow.com/questions/64602/what-are-differences-between-assemblyversion-assemblyfileversion-and-assemblyin -->
    <AssemblyInfo CodeLanguage="CS"
                  OutputFile="$(SolutionDir)src\CommonAssemblyInfo.cs"
                  GenerateClass="true"
                  AssemblyCompany="Basho Technologies"
                  AssemblyCopyright="Copyright Basho Technologies © $(Year). All rights reserved."
                  AssemblyProduct="riak-dotnet-client"
                  AssemblyTrademark="riak-dotnet-client"
                  AssemblyCulture=""
                  AssemblyConfiguration="$(Configuration)"
                  AssemblyVersion="$(VMajor).0.0"
                  AssemblyFileVersion="$(VMajor).$(VMinor).$(VPatch)"
                  AssemblyInformationalVersion="$(GitCommitHash)" />
  </Target>

  <Target Name="ProtoGen">
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -i:%(ProtoFile.Identity) -o:$(ProtoMsgDir)\@(ProtoFile->'%(filename)').cs" />
  </Target>

  <Target Name="PublishNuGetPackage" DependsOnTargets="PublishValidation">
    <XmlQuery XmlFileName="$(RiakClientPackagesConfig)" XPath="/packages/package[@id='Newtonsoft.Json']/@version">
      <Output TaskParameter="Values" PropertyName="NewtonsoftJsonVersion" />
    </XmlQuery>
    <XmlQuery XmlFileName="$(RiakClientPackagesConfig)" XPath="/packages/package[@id='protobuf-net']/@version">
      <Output TaskParameter="Values" PropertyName="ProtobufNetVersion" />
    </XmlQuery>

    <ItemGroup>
      <Tokens Include="VERSION">
        <ReplacementValue>$(NuGetVersion)</ReplacementValue>
      </Tokens>
      <Tokens Include="NEWTONSOFT_JSON_VERSION">
        <ReplacementValue>$(NewtonsoftJsonVersion)</ReplacementValue>
      </Tokens>
      <Tokens Include="PROTOBUF_NET_VERSION">
        <ReplacementValue>$(ProtobufNetVersion)</ReplacementValue>
      </Tokens>
    </ItemGroup>
    <TemplateFile Template="$(NuGetSpecTemplate)" OutputFileName="$(NuGetSpecFile)" Tokens="@(Tokens)" />
    <Exec WorkingDirectory="$(NuGetDir)"
          Command="$(NuGetExe) pack -Symbols -Verbosity normal $(NuGetSpecFile)" />
    <Exec WorkingDirectory="$(NuGetDir)"
          Command="$(NuGetExe) push -NonInteractive -Verbosity normal RiakClient.$(NuGetVersion).nupkg" />
    <Exec WorkingDirectory="$(NuGetDir)"
          Command="$(NuGetExe) push -NonInteractive -Verbosity normal RiakClient.$(NuGetVersion).symbols.nupkg" />
  </Target>

  <Target Name="PublishGitHubRelease" DependsOnTargets="PublishValidation">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(PowerShellExe) -NonInteractive -NoProfile -ExecutionPolicy Bypass -File $(SolutionDir)build\create-github-release.ps1 $(GitTagVersion)" />
  </Target>

  <Target Name="Publish"
          DependsOnTargets="PublishValidation;TestAll;PublishMergeMasterAndTag;Release;PublishNuGetPackage;PublishGitHubRelease" />

  <Target Name="GitSubmodule" Condition="!Exists('$(ProtoMsgCsvFile)')">
    <GitClient Command="submodule" Arguments="update --init" LocalPath="$(SolutionDir)" />
  </Target>

  <Target Name="All" DependsOnTargets="GenerateCommonAssemblyInfo">
    <MSBuild Projects="@(ProjectToBuild)" BuildInParallel="True" />
  </Target>

  <Target Name="CleanAll">
    <MSBuild Projects="@(ProjectToBuild)" Targets="Clean" BuildInParallel="True" />
  </Target>

  <Target Name="Release" DependsOnTargets="GenerateCommonAssemblyInfo">
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=Release" />
  </Target>

  <Target Name="Debug" DependsOnTargets="GenerateCommonAssemblyInfo">
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=Debug" />
  </Target>

  <Target Name="IntegrationTest" DependsOnTargets="Debug">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) -work=$(ProjDir)\RiakClientTests.Live $(ProjDir)\RiakClientTests.Live\RiakClientTests.Live.nunit" />
  </Target>

  <Target Name="CodeAnalysis"> <!-- DependsOnTargets="Debug;ResolveReferences;RunCodeAnalysis" -->
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=Debug;VisualStudioVersion=12.0;CodeAnalysisTreatWarningsAsErrors=true;CodeAnalysisRuleSet=MinimumRecommendedRules.ruleset;RunCodeAnalysis=true" />
  </Target>

  <Target Name="UnitTest" DependsOnTargets="GitSubmodule;Debug;CodeAnalysis">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) -work=$(ProjDir)\RiakClientTests $(ProjDir)\RiakClientTests\RiakClientTests.nunit" />
  </Target>

  <Target Name="TestAll" DependsOnTargets="UnitTest;IntegrationTest" />

  <Target Name="Test" DependsOnTargets="TestAll" />

  <!--
    NB:
    Do NOT create a 'Clean' target - that will screw up VS
  -->

  <Target Name="DeprecatedTest" DependsOnTargets="Debug">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) -work=$(ProjDir)\RiakClientTests.Deprecated $(ProjDir)\RiakClientTests.Deprecated\RiakClientTests.Deprecated.nunit" />
  </Target>

</Project>

