<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Debug" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\..\</SolutionDir>
    <BuildPath>$(SolutionDir)build</BuildPath>
  </PropertyGroup>

  <Import Project="$(BuildPath)\properties.xml" Condition="'$(PropertiesImported)' != 'true'" />
  <Import Project="$(BuildPath)\assemblyinfo.targets" />

  <Target Name="PublishValidateVersionString">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <Error Condition="'$(VersionString)' == '' Or '$(VersionString)' == 'unknown'"
           Text="Must set VersionString property on command line!" />
  </Target>

  <Target Name="PublishValidateBranch">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <GitBranch LocalPath="$(SolutionDir)">
      <Output TaskParameter="Branch" PropertyName="GitBranch" />
    </GitBranch>
    <Message Condition="$(IsDryRun) == 'true' And $(VPreRelease) != '' And '$(GitBranch)' != '$(MasterBranchName)'"
             Text="NOTE: You are publishing from a non-master branch for pre-release version $(VPreRelease)" />
    <Error Condition="$(IsDryRun) == 'false' And $(VPreRelease) == '' And '$(GitBranch)' != '$(MasterBranchName)'"
           Text="Please ensure all features have been merged into $(MasterBranchName) and that you are on the $(MasterBranchName) branch." />
  </Target>

  <Target Name="PublishValidation" DependsOnTargets="PublishValidateVersionString;PopulateVersionInformation;PublishValidateBranch">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <!-- Validate parsed VersionString -->
    <RegexMatch Input="$(VMajor)" Expression="^[1-9]$">
      <Output PropertyName="VMajorValidated" TaskParameter="Output" />
    </RegexMatch>
    <Error Condition="'$(VMajorValidated)' == '' Or (!($(VMajorValidated) &gt; 0))"
           Text="VersionString must be in X.Y.Z-PreRelStr where X &gt; 0 and -PreRelStr is optional" />
    <RegexMatch Input="$(VMinor)" Expression="^[0-9]$">
      <Output PropertyName="VMinorValidated" TaskParameter="Output" />
    </RegexMatch>
    <Error Condition="'$(VMinorValidated)' == '' Or (!($(VMajorValidated) &gt;= 0))"
           Text="VersionString must be in X.Y.Z-PreRelStr where X &gt; 0 and -PreRelStr is optional" />
    <RegexMatch Input="$(VPatch)" Expression="^[0-9]$">
      <Output PropertyName="VPatchValidated" TaskParameter="Output" />
    </RegexMatch>
    <Error Condition="'$(VPatchValidated)' == '' Or (!($(VMajorValidated) &gt;= 0))"
           Text="VersionString must be in X.Y.Z-PreRelStr where X &gt; 0 and -PreRelStr is optional" />

    <PropertyGroup Condition="'$(VPreRelease)' == ''">
      <NuGetVersion>$(VMajor).$(VMinor).$(VPatch)</NuGetVersion>
    </PropertyGroup>
    <PropertyGroup Condition="'$(VPreRelease)' != ''">
      <NuGetVersion>$(VMajor).$(VMinor).$(VPatch)$(VPreRelease)</NuGetVersion> <!-- NB: VPreRelease starts with the dash -->
    </PropertyGroup>
    <PropertyGroup>
      <GitTagVersion>$(NuGetVersion)</GitTagVersion>
      <GitTagMessage>&quot;riak-dotnet-client $(NuGetVersion)&quot; &quot;$(GitTagVersion)&quot;</GitTagMessage>
    </PropertyGroup>

    <Message Text="Solution Dir: '$(SolutionDir)'" />
    <Message Text="Solution File: '$(SolutionFile)'" />
    <Message Text="Proj Dir: '$(ProjDir)'" />
    <Message Text="NuGet Dir: '$(NuGetDir)'" />
    <Message Text="CommonAssemblyInfo.cs File: '$(CommonAssemblyInfoFile)'" />
  </Target>

  <Target Name="PublishTag" Condition="$(IsDryRun) == 'false'" DependsOnTargets="PublishValidation">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <Message Text="Tagging with $(GitTagMessage)" />
    <GitClient Command="tag" Arguments="--message $(GitTagMessage)" LocalPath="$(SolutionDir)" />
    <Message Text="Pushing tag $(GitTagVersion). NOTE: this requires a remote named &quot;basho&quot;" />
    <GitClient Command="push" Arguments="basho &quot;$(GitTagVersion)&quot;" LocalPath="$(SolutionDir)" />
  </Target>

  <Target Name="PublishBuildRelease" DependsOnTargets="GenerateCommonAssemblyInfo">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <Message Text="MSBuild properties: Configuration=Release;SolutionDir=$(SolutionDir);VersionString=$(VersionString)" />
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=Release;SolutionDir=$(SolutionDir);VersionString=$(VersionString)" />
  </Target>

  <Target Name="ProtoGen">
    <!-- NB: do NOT use detectMissing for these (yet) -->
    <!-- NB: MUST EDIT THE src\RiakClient\Messages\riak_dt.cs file -->
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -i:riak_dt.proto -o:$(ProtoMsgDir)\riak_dt.cs" />
    <Warning Text="NOTICE: *MUST* manually edit src\RiakClient\Messages\riak_dt.cs file. REMOVE the '[global::System.ComponentModel.DefaultValue(MapUpdate.FlagOp.ENABLE)]' attribute from the flag_op property of the MapUpdate class" />
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -i:riak_kv.proto -o:$(ProtoMsgDir)\riak_kv.cs" />
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -i:riak_search.proto -o:$(ProtoMsgDir)\riak_search.cs" />
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -i:riak_yokozuna.proto -o:$(ProtoMsgDir)\riak_yokozuna.cs" />
    <!-- NB: MUST use detectMissing for bucket props optional fields -->
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -p:detectMissing -i:riak.proto -o:$(ProtoMsgDir)\riak.cs" />
    <!-- NB: MUST use detectMissing for TS optional fields -->
    <Exec WorkingDirectory="$(ProtoDir)"
          Command="$(ProtoGenExe) -ns:RiakClient.Messages -p:detectMissing -i:riak_ts.proto -o:$(ProtoMsgDir)\riak_ts.cs" />
  </Target>

  <Target Name="PublishNuGetPackage" Condition="$(IsDryRun) == 'false'" DependsOnTargets="PublishValidation">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <XmlQuery XmlFileName="$(RiakClientPackagesConfig)" XPath="/packages/package[@id='Newtonsoft.Json']/@version">
      <Output TaskParameter="Values" PropertyName="NewtonsoftJsonVersion" />
    </XmlQuery>
    <XmlQuery XmlFileName="$(RiakClientPackagesConfig)" XPath="/packages/package[@id='protobuf-net']/@version">
      <Output TaskParameter="Values" PropertyName="ProtobufNetVersion" />
    </XmlQuery>

    <ItemGroup>
      <Tokens Include="VERSION">
        <ReplacementValue>$(NuGetVersion)</ReplacementValue>
      </Tokens>
      <Tokens Include="NEWTONSOFT_JSON_VERSION">
        <ReplacementValue>$(NewtonsoftJsonVersion)</ReplacementValue>
      </Tokens>
      <Tokens Include="PROTOBUF_NET_VERSION">
        <ReplacementValue>$(ProtobufNetVersion)</ReplacementValue>
      </Tokens>
    </ItemGroup>

    <TemplateFile Template="$(NuGetSpecTemplate)" OutputFileName="$(NuGetSpecFile)" Tokens="@(Tokens)" />

    <Exec WorkingDirectory="$(NuGetDir)"
          Command="$(NuGetExe) pack -Symbols -Verbosity normal $(NuGetSpecFile)" />
    <Exec WorkingDirectory="$(NuGetDir)"
          Command="$(NuGetExe) push -NonInteractive -Source nuget.org -Verbosity normal RiakClient.$(NuGetVersion).nupkg" />
  </Target>

  <Target Name="PublishGitHubRelease" Condition="$(IsDryRun) == 'false'" DependsOnTargets="PublishValidation">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Publish targets are Windows-only!" />
    <PropertyGroup Condition="'$(VPreRelease)' != ''">
      <IsPreReleaseArg>-IsPreRelease</IsPreReleaseArg>
    </PropertyGroup>
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(PowerShellExe) -NonInteractive -NoProfile -ExecutionPolicy Bypass -File $(SolutionDir)build\create-github-release.ps1 -VersionString $(GitTagVersion) $(IsPreReleaseArg)" />
  </Target>

  <Target Name="Publish"
          DependsOnTargets="RestorePackages;PublishValidation;PublishTag;PublishBuildRelease;PublishNuGetPackage;PublishGitHubRelease" />

  <Target Name="GitSubmodule" Condition="!Exists('$(ProtoMsgCsvFile)')">
    <GitClient Command="submodule" Arguments="update --init" LocalPath="$(SolutionDir)" />
  </Target>

  <Target Name="RestorePackages">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NuGetExe) restore -PackagesDirectory $(NuGetPackagesDir) -NonInteractive $(SolutionFile)" />
  </Target>

  <Target Name="All" DependsOnTargets="RestorePackages;GenerateCommonAssemblyInfo">
    <MSBuild Projects="@(ProjectToBuild)" Properties="VersionString=$(VersionString)" BuildInParallel="True" />
  </Target>

  <Target Name="CleanAll">
    <MSBuild Projects="@(ProjectToBuild)" Properties="VersionString=$(VersionString)" Targets="Clean" BuildInParallel="True" />
  </Target>

  <Target Name="Release" DependsOnTargets="RestorePackages;GenerateCommonAssemblyInfo">
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=Release;VersionString=$(VersionString)" />
  </Target>

  <Target Name="Debug" DependsOnTargets="RestorePackages;GenerateCommonAssemblyInfo">
    <MSBuild Projects="$(SolutionFile)" Properties="Configuration=Debug;VersionString=$(VersionString)" />
  </Target>

  <Target Name="SetupTests">
    <XmlQuery XmlFileName="$(SolutionDir)src\Test\packages.config" XPath="/packages/package[@id='NUnit.ConsoleRunner']/@version">
      <Output TaskParameter="Values" PropertyName="NUnitRunnersVersion" />
    </XmlQuery>
    <PropertyGroup>
      <NUnitConsoleRunnerDir>$(SolutionDir)packages\NUnit.ConsoleRunner.$(NUnitRunnersVersion)\tools</NUnitConsoleRunnerDir>
      <NUnitConsoleRunnerExe>$(NUnitConsoleRunnerDir)\nunit3-console.exe</NUnitConsoleRunnerExe>
      <NUnitConsoleRunnerArgs Condition="'$(Verbose)' != 'true'">--noheader</NUnitConsoleRunnerArgs>
      <NUnitConsoleRunnerArgs Condition="'$(Verbose)' == 'true'">--verbose --labels=All</NUnitConsoleRunnerArgs>
      <NUnitConsoleRunnerCommand Condition="'$(OS)' == 'Windows_NT'">$(NUnitConsoleRunnerExe) $(NUnitConsoleRunnerArgs) --config=Debug --framework=v4.0</NUnitConsoleRunnerCommand>
      <NUnitConsoleRunnerCommand Condition="'$(OS)' != 'Windows_NT'">$(MonoExe) $(NUnitConsoleRunnerExe) $(NUnitConsoleRunnerArgs) --config=Debug-Mono --framework=mono-4.0</NUnitConsoleRunnerCommand>
    </PropertyGroup>
  </Target>

  <Target Name="Documentation" DependsOnTargets="Release">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="Documentation can only be built on Windows via Sandcasle!" />
    <Error Condition="'$(SHFBROOT)' == ''" Text="Ensure Sandcastle is installed and that the SHFBROOT environment variable is set!" />
    <PropertyGroup>
      <SandcastleProjFile>$(ProjDir)\RiakClient.shfbproj</SandcastleProjFile>
      <SandcastleDocSourcePath>$(RiakClientProjDir)\bin\Release</SandcastleDocSourcePath>
      <SandcastleDocOutputPath>$(RiakClientProjDir)\docs</SandcastleDocOutputPath>
    </PropertyGroup>
    <MSBuild Projects="$(SandcastleProjFile)"
             Targets="Clean;Rebuild"
             Properties="Configuration=Release;DocumentationSourcePath=$(SandcastleDocSourcePath);OutputPath=$(SandcastleDocOutputPath)" />
  </Target>

  <Target Name="CodeAnalysis">
    <PropertyGroup Condition="'$(VisualStudioVersion)' == ''">
      <VisualStudioVersion>12.0</VisualStudioVersion>
    </PropertyGroup>
    <MSBuild Projects="$(SolutionFile)"
             Properties="Configuration=Debug;VisualStudioVersion=$(VisualStudioVersion);CodeAnalysisTreatWarningsAsErrors=true;CodeAnalysisRuleSet=MinimumRecommendedRules.ruleset;RunCodeAnalysis=true" />
  </Target>

  <Target Name="UnitTest" DependsOnTargets="GitSubmodule;SetupTests;Debug;CodeAnalysis">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) --work=$(ProjDir)\RiakClientTests $(ProjDir)\RiakClientTests\RiakClientTests.nunit" />
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) --work=$(ProjDir)\Test --test=Test.Unit $(ProjDir)\Test\Test.nunit" />
  </Target>

  <Target Name="IntegrationTest" DependsOnTargets="SetupTests;Debug">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) --work=$(ProjDir)\RiakClientTests.Live $(ProjDir)\RiakClientTests.Live\RiakClientTests.Live.nunit" />
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) --work=$(ProjDir)\Test --test=Test.Integration.CRDT,Test.Integration.KV,Test.Integration.Issues $(ProjDir)\Test\Test.nunit" />
  </Target>

  <Target Name="TimeseriesTest" DependsOnTargets="SetupTests;Debug">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) --work=$(ProjDir)\Test --test=Test.Integration.TS $(ProjDir)\Test\Test.nunit" />
  </Target>

  <Target Name="TestAll" DependsOnTargets="UnitTest;IntegrationTest" />

  <Target Name="Test" DependsOnTargets="TestAll" />

  <!--
    NB:
    Do NOT create a 'Clean' target - that will screw up VS
  -->

  <Target Name="DeprecatedTest" DependsOnTargets="SetupTests;Debug">
    <Exec WorkingDirectory="$(SolutionDir)"
          Command="$(NUnitConsoleRunnerCommand) -work=$(ProjDir)\RiakClientTests.Deprecated $(ProjDir)\RiakClientTests.Deprecated\RiakClientTests.Deprecated.nunit" />
  </Target>

</Project>

