<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Riak_Commands_StreamingCommandRequiresCallbackException" xml:space="preserve">
    <value>Streaming command requires a callback.</value>
  </data>
  <data name="Riak_Core_CommandHasNoResponseTypeButDataPresentException_fmt" xml:space="preserve">
    <value>Command '{0}' should not have response data but {1} bytes of data present.</value>
  </data>
  <data name="Riak_Core_CommandHasResponseTypeButNoDataPresentException_fmt" xml:space="preserve">
    <value>Command '{0}' should have response data but {1} bytes of data present.</value>
  </data>
  <data name="Riak_Core_ConnectionCanReadIsFalseException" xml:space="preserve">
    <value>Unable to read data from the source stream - CanRead is false</value>
  </data>
  <data name="Riak_Core_ConnectionCantWriteException_fmt" xml:space="preserve">
    <value>Failed to send data to server - Can't write: {0}</value>
  </data>
  <data name="Riak_Core_ConnectionConnectedTo_fmt" xml:space="preserve">
    <value>connected to: {0}</value>
  </data>
  <data name="Riak_Core_ConnectionDidNotReadFullMessageException_fmt" xml:space="preserve">
    <value>Expected to read PB message of size {0} bytes but only read {1} bytes.</value>
  </data>
  <data name="Riak_Core_ConnectionInFlightException_fmt" xml:space="preserve">
    <value>{0}|attempt to execute command {1} on connection that is executing another command.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerAllConnectionsInUseException_fmt" xml:space="preserve">
    <value>{0}|all connections in use / max connections reached.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerExpirationCancelled_fmt" xml:space="preserve">
    <value>{0}|expiration routine cancelled.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerExpirationRoutineStarting_fmt" xml:space="preserve">
    <value>{0}|connection expiration routine is starting.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerExpirationRoutineStopping_fmt" xml:space="preserve">
    <value>{0}|connection expiration routine is stopping.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerExpirationSleeping_fmt" xml:space="preserve">
    <value>{0}|expiration routine sleeping for {1}</value>
  </data>
  <data name="Riak_Core_ConnectionManagerExpiredConnections_fmt" xml:space="preserve">
    <value>{0}|expired {1} connections.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerExpiringAt_fmt" xml:space="preserve">
    <value>{0}|expiring connections at {1}</value>
  </data>
  <data name="Riak_Core_ConnectionManagerIteratingConnectionQueueForExpirationTimeout_fmt" xml:space="preserve">
    <value>{0}|expiration thread timeout while waiting for queue lock to iterate on {1} items.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerRequiresAddressException" xml:space="preserve">
    <value>ConnectionManagerOptions requires a non-null address.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerRequiresOptionsException" xml:space="preserve">
    <value>ConnectionManager requires options.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerReturnedShutdown_fmt" xml:space="preserve">
    <value>{0}|connection returned at shutdown.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerStopConnectionCountNotEqualQueueCount_fmt" xml:space="preserve">
    <value>{0}|connection count '{1}' does NOT equal queue count '{2}'.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerStopExpirationStopTimeout_fmt" xml:space="preserve">
    <value>{0}|timeout while waiting for expiration thread to complete.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerStopIteratingConnectionQueueTimeout_fmt" xml:space="preserve">
    <value>{0}|timeout waiting for queue lock to iterate on {1} items.</value>
  </data>
  <data name="Riak_Core_ConnectionManagerWaitingExpirationTask_fmt" xml:space="preserve">
    <value>{0}|waiting for expiration task to complete.</value>
  </data>
  <data name="Riak_Core_ConnectionZeroLengthResponseException" xml:space="preserve">
    <value>Attempt to decode zero byte data response from Riak.</value>
  </data>
  <data name="Riak_Core_ExecutingCommand_fmt" xml:space="preserve">
    <value>{0}|executing command {1}</value>
  </data>
  <data name="Riak_Core_MaxConnectionsMustBeGreaterThanMinConnectionsException" xml:space="preserve">
    <value>maxConnections must be greater than or equal to minConnections.</value>
  </data>
  <data name="Riak_Core_MessageDataCantBeNull" xml:space="preserve">
    <value>Message data must not be null when decoding.</value>
  </data>
  <data name="Riak_Core_MessageResponseCodeIsZeroException_fmt" xml:space="preserve">
    <value>Response code is 0 for command {0}</value>
  </data>
  <data name="Riak_Core_MessageUnexpectedResponseCodeException_fmt" xml:space="preserve">
    <value>Unexpected message code from Riak - expected {0}, actual {1}</value>
  </data>
  <data name="Riak_Core_NodeAlreadyHealthChecking_fmt" xml:space="preserve">
    <value>{0}|already health checking or shutting down.</value>
  </data>
  <data name="Riak_Core_NodeHealthCheckCancelled_fmt" xml:space="preserve">
    <value>{0}|health check routine cancelled.</value>
  </data>
  <data name="Riak_Core_NodeHealthCheckException_fmt" xml:space="preserve">
    <value>{0}|health check exception: {1}</value>
  </data>
  <data name="Riak_Core_NodeHealthCheckQuitting_fmt" xml:space="preserve">
    <value>{0}|health check routine quitting ({1}).</value>
  </data>
  <data name="Riak_Core_NodeHealthCheckSleeping_fmt" xml:space="preserve">
    <value>{0}|health check routine sleeping for {1}</value>
  </data>
  <data name="Riak_Core_NodeManagerCommandRequiredException" xml:space="preserve">
    <value>Node manager requires a non-null command argument.</value>
  </data>
  <data name="Riak_Core_NodeManagerZeroLengthNodes_fmt" xml:space="preserve">
    <value>Zero nodes for executon of command {0}</value>
  </data>
  <data name="Riak_Core_NodeManager_ExecutedCommand_fmt" xml:space="preserve">
    <value>executed {0} on node {1}</value>
  </data>
  <data name="Riak_Core_NodeMaxConnectionsMustBeLessThanException_fmt" xml:space="preserve">
    <value>maxConnections must be less than {0}</value>
  </data>
  <data name="Riak_Core_NodeMinConnectionsMustBeOneOrGreaterException" xml:space="preserve">
    <value>minConnections must be greater than or equal to 1.</value>
  </data>
  <data name="Riak_Core_NodeRequiresAddressException" xml:space="preserve">
    <value>Node requires address.</value>
  </data>
  <data name="Riak_Core_NodeRequiresOptionsException" xml:space="preserve">
    <value>Node requires options.</value>
  </data>
  <data name="Riak_Core_NodeRunningHealthCheckAt_fmt" xml:space="preserve">
    <value>{0}|running health check at {1}</value>
  </data>
  <data name="Riak_Core_NodeStartingHealthCheck_fmt" xml:space="preserve">
    <value>{0}|starting health check routine.</value>
  </data>
  <data name="Riak_Core_NodeStopHealthCheckStopTimeout_fmt" xml:space="preserve">
    <value>{0}|timeout while waiting for health check thread to complete.</value>
  </data>
  <data name="Riak_Core_NodeWaitingHealthCheckTask_fmt" xml:space="preserve">
    <value>{0}|waiting for health check task to complete.</value>
  </data>
  <data name="Riak_Core_Node_HealthcheckFailed_fmt" xml:space="preserve">
    <value>{0}|health check failed: {1}</value>
  </data>
  <data name="Riak_Core_Node_HealthcheckSuccess_fmt" xml:space="preserve">
    <value>{0}|health check success.</value>
  </data>
  <data name="Riak_Core_PortMustBeInRange" xml:space="preserve">
    <value>Port must be between 1 and 65535, inclusive.</value>
  </data>
  <data name="Riak_Core_Running_fmt" xml:space="preserve">
    <value>{0}|running.</value>
  </data>
  <data name="Riak_Core_SecurityManager_ClientCertificateFileNotFound" xml:space="preserve">
    <value>Client certificate file not found.</value>
  </data>
  <data name="Riak_Core_Shutdown_fmt" xml:space="preserve">
    <value>{0}|shut down.</value>
  </data>
  <data name="Riak_Core_ShuttingDown_fmt" xml:space="preserve">
    <value>{0}|shutting down.</value>
  </data>
  <data name="Riak_Core_Starting_fmt" xml:space="preserve">
    <value>{0}|starting.</value>
  </data>
  <data name="Riak_Core_StateManagerDisposedException" xml:space="preserve">
    <value>StateManager is disposed.</value>
  </data>
  <data name="Riak_Core_StateManagerMustUseByteEnum" xml:space="preserve">
    <value>StateManager requires an enum using a byte as the underyling type.</value>
  </data>
  <data name="Riak_Core_StateManagerMustUseEnum" xml:space="preserve">
    <value>StateManager requires an enum type.</value>
  </data>
  <data name="Riak_Core_StateManagerRequiresAtLeastOneState" xml:space="preserve">
    <value>StateManager requires at least one state value.</value>
  </data>
  <data name="Riak_Core_StateManagerStateCheckExpectedStateButGot_fmt" xml:space="preserve">
    <value>Illegal state! Expected state {0} but got {1}</value>
  </data>
  <data name="Riak_Core_StopAlreadyCalled_fmt" xml:space="preserve">
    <value>{0}|stop already called. Current state: {1}</value>
  </data>
</root>